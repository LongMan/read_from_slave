h1. Read_from_slave

h4. Read_from_slave for Rails enables database reads from a slave database, while writes continue to go to the master

h2. Installation

<pre>
<code>
sudo gem install sdsykes-read_from_slave
</code>
</pre>

h2. Configuration

In config/environments/production.rb (for instance)

<pre>
<code>
config.gem "sdsykes-read_from_slave", :lib=>"read_from_slave"
</code>
</pre>

In config/database.yml

<pre>
<code>
production:
  adapter: mysql
  database: mydatabase
  username: myuser
  password: mypassword
  host: my.main.database.server.com
  port: 3306

slave_for_mydatabase:
  adapter: mysql
  database: mydatabase
  username: myuser
  password: mypassword
  socket: /var/lib/mysql/mysql.sock
</code>
</pre>

Just use the regular YAML format to specify your slave database, it could equally well be on
another server as the local example given above.

h2. Documentation

"http://rdoc.info/projects/sdsykes/read_from_slave":http://rdoc.info/projects/sdsykes/read_from_slave

h2. Todo

* Support a pool of multiple slaves
* Address concerns of replication lag, override reload

h2. References

* "Masochism":http://github.com/technoweenie/masochism/tree/master
** not thread safe
** won't work with apps that talk to multiple (master) databases
* "Acts as readonlyable":http://rubyforge.org/projects/acts-as-with-ro/
** old, not suitable for Rails 2.x



(c) 2009 Stephen Sykes
